cache:
  untracked: true
  paths:
    - vendor/
    - vendor/apt
    - vendor/julia

# Below is the template to run your tests in Julia
.test_template: &test_6
  before_script:
    - mkdir -p vendor/apt
    - mkdir -p vendor/julia
    - apt-get update -yqq
    - apt-get update -qq && apt-get -o dir::cache::archives="vendor/apt" install -y -qq wget git gcc gfortran liblapack-dev libgmp-dev libglpk-dev cmake g++ build-essential pkg-config
    - mkdir -p /root/.julia/v0.6
    - cp -r vendor/julia/. /root/.julia/v0.6/
    - ls -a /root/.julia/v0.6/
    - rm -f /root/.julia/v0.6/.cache
    - ls -a /root/.julia/v0.6/

  script:
    # Let's run the tests. Substitute `coverage = false` below, if you do not
    # want coverage results.
    - julia -e 'Pkg.update();'
    - julia -e 'if "Juniper" in keys(Pkg.installed()) Pkg.rm("Juniper"); Pkg.rm("Juniper") end'
    - julia -e 'Pkg.clone(pwd());'
    - ls -a /root/.julia/v0.6/
    - julia -e 'Pkg.add("Ipopt")'
    - julia -e 'Pkg.test("Juniper",
      coverage = true)'
    # Comment out below if you do not want coverage results.
    - julia -e 'Pkg.add("Coverage"); cd(Pkg.dir("Juniper"));
      using Coverage; cl, tl = get_summary(process_folder());
      println("(", cl/tl*100, "%) covered")'
    - pwd
    - ls -a
    - cp -r /root/.julia/v0.6/. vendor/julia/


test:0.6.4:
  image: julia:0.6.4
  <<: *test_6

